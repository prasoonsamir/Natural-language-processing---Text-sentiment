import nltk
import sklearn
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier, export_graphviz
import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
tfidf_transformer = TfidfTransformer()
from nltk.corpus import stopwords
import re
import csv

df = pd.read_csv("C:\\Users\\Samir Prasun\\Desktop\\Sentiment analysis\\train.csv")
df_new = pd.read_csv("C:\\Users\\Samir Prasun\\Desktop\\Sentiment analysis\\test.csv")

df.tweets = []

from nltk.stem import WordNetLemmatizer

stemmer = WordNetLemmatizer()

for sen in range(0, len(df.tweet)):
    # Remove all the special characters
    document = re.sub(r'\W', ' ', str(df.tweet[sen]))
    
    # remove all single characters
    document = re.sub(r'\s+[a-zA-Z]\s+', ' ', document)
    
    # Remove single characters from the start
    document = re.sub(r'\^[a-zA-Z]\s+', ' ', document) 
    
    # Substituting multiple spaces with single space
    document = re.sub(r'\s+', ' ', document, flags=re.I)
    
    # Removing prefixed 'b'
    document = re.sub(r'^b\s+', '', document)
    
    # Converting to Lowercase
    document = document.lower()
    
    # Lemmatization
    document = document.split()

    document = [stemmer.lemmatize(word) for word in document]
    document = ' '.join(document)
    
    df.tweets.append(document)

tweet_train, tweet_test, y_train, y_test = train_test_split(df.tweets, df.label.values, test_size=0.25, random_state=1000)

#vectorizer = CountVectorizer(max_features=2000,min_df=5, max_df=0.7, stop_words=stopwords.words('english'))
vectorizer = CountVectorizer(max_features=2000, stop_words=stopwords.words('english'))
vectorizer.fit(tweet_train)
X_train = vectorizer.transform(tweet_train)
X_test  = vectorizer.transform(tweet_test)

X_train_tfidf = tfidf_transformer.fit_transform(X_train)
X_test_tfidf = tfidf_transformer.fit_transform(X_test)
print(X_train_tfidf.shape)


model = MultinomialNB()
model.fit(X_train_tfidf, y_train)
predictions = model.predict(X_test_tfidf)
print(accuracy_score(y_test, predictions))

model = LogisticRegression()
model.fit(X_train_tfidf, y_train)
predictions = model.predict(X_test_tfidf)
print(accuracy_score(y_test, predictions))

model = DecisionTreeClassifier()
model.fit(X_train_tfidf, y_train)
predictions = model.predict(X_test_tfidf)
print(accuracy_score(y_test, predictions))

model = RandomForestClassifier(n_estimators=100)
model.fit(X_train_tfidf, y_train)
predictions = model.predict(X_test_tfidf)
print(accuracy_score(y_test, predictions))

model_NN = Sequential()
model_NN.add(Dense(10, input_dim=X_train_tfidf.shape[1], activation='relu'))
#model.add(Dense(8, activation='relu'))
model_NN.add(Dense(1, activation='sigmoid'))
model_NN.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model_NN.fit(X_train_tfidf, y_train, epochs=3, batch_size=10)
...
_, accuracy = model_NN.evaluate(X_test_tfidf, y_test)
print('Accuracy: %.2f' % (accuracy*100))




df_new.tweets = []

from nltk.stem import WordNetLemmatizer

stemmer = WordNetLemmatizer()

for sen in range(0, len(df_new.tweet)):
    # Remove all the special characters
    document = re.sub(r'\W', ' ', str(df.tweet[sen]))
    
    # remove all single characters
    document = re.sub(r'\s+[a-zA-Z]\s+', ' ', document)
    
    # Remove single characters from the start
    document = re.sub(r'\^[a-zA-Z]\s+', ' ', document) 
    
    # Substituting multiple spaces with single space
    document = re.sub(r'\s+', ' ', document, flags=re.I)
    
    # Removing prefixed 'b'
    document = re.sub(r'^b\s+', '', document)
    
    # Converting to Lowercase
    document = document.lower()
    
    # Lemmatization
    document = document.split()

    document = [stemmer.lemmatize(word) for word in document]
    document = ' '.join(document)
    
    df_new.tweets.append(document)

#vectorizer = CountVectorizer(max_features=2000,min_df=5, max_df=0.7, stop_words=stopwords.words('english'))
vectorizer_new = CountVectorizer(max_features=2000, stop_words=stopwords.words('english'))
vectorizer_new.fit(df_new.tweets)
X_new = vectorizer_new.transform(df_new.tweets)

X_test_tfidf_new = tfidf_transformer.fit_transform(X_new)

Y_New=model_NN.predict(X_test_tfidf_new) # predict the response variable for new dataset

Round=Y_New.round()  # response variable is the probability of yes or no, which needs to be rounded
print(Round.shape) 

f = open("C:\\Users\\Samir Prasun\\Desktop\\Sentiment analysis\\Output.csv",'w') ## steps to write the output or predicted data into a new output file "Output.csv"
# Write data to file
with f:
 
    writer = csv.writer(f)
    for row in Round:
        writer.writerow(row)


f.close()
